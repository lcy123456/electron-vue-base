{"version":3,"sources":["../../../electron/utils/fileHandle/index.ts"],"sourcesContent":["import { app, dialog, shell } from \"electron\";\nimport {\n  existsSync,\n  writeFile,\n  mkdir,\n  createReadStream,\n  copyFile,\n  readFile,\n} from \"node:fs\";\nimport crypto from \"crypto\";\nimport path from \"node:path\";\n\nconst downloadsPath = app.getPath(\"downloads\");\nconst saveDownloadsPath = path.join(downloadsPath, \"ET2 Desktop\");\n\nconst createSaveDownloadsFolder = () => {\n  return new Promise((resolve, reject) => {\n    const isExists = existsSync(saveDownloadsPath);\n    isExists\n      ? resolve(true)\n      : mkdir(saveDownloadsPath, (err) => {\n          err ? reject(err) : resolve(true);\n        });\n  });\n};\ncreateSaveDownloadsFolder();\n\nexport const cacheFile = ({ fileName, uint8Array }) => {\n  return new Promise(async (resolve, reject) => {\n    await createSaveDownloadsFolder();\n    const buffer = Buffer.from(uint8Array);\n    const filePath = path.join(saveDownloadsPath, fileName);\n    const uniquePath = getUniqueFileName(filePath);\n    writeFile(uniquePath, buffer, \"utf-8\", async function (err) {\n      if (err) {\n        reject(err);\n      } else {\n        const hash = await getFileMd5(uniquePath);\n        resolve({ savePath: uniquePath, saveHash: hash });\n      }\n    });\n  });\n};\n\nexport const previewFile = async (filePath: string) => {\n  return await shell.openPath(filePath);\n};\n\nexport const saveAsFile = (\n  data: string | { fileName: string; uint8Array: Uint8Array },\n) => {\n  const isString = typeof data === \"string\";\n  return new Promise(async (resolve, reject) => {\n    const saveRes = await dialog.showSaveDialog({\n      title: \"文件另存为\",\n      defaultPath: isString ? path.basename(data) : data.fileName,\n    });\n    if (!saveRes.filePath) return;\n    if (isString) {\n      copyFile(data, saveRes.filePath, async (err) => {\n        err ? reject(err) : resolve(true);\n      });\n    } else {\n      writeFile(\n        saveRes.filePath,\n        Buffer.from(data.uint8Array),\n        \"utf-8\",\n        async function (err) {\n          err ? reject(err) : resolve(true);\n        },\n      );\n    }\n  });\n};\n\nconst getUniqueFileName = (filePath: string) => {\n  let index = 0;\n  let uniquePath = filePath;\n\n  while (existsSync(uniquePath)) {\n    index++;\n    const fileName = path.basename(filePath);\n    const ext = path.extname(filePath);\n    const baseName = fileName.slice(0, -ext.length);\n    const numberedName = baseName + `(${index})` + ext;\n    uniquePath = path.join(path.dirname(filePath), numberedName);\n  }\n\n  return uniquePath;\n};\n\nexport const compareFiles = async ({ filePath, fileHash }) => {\n  const isExists = existsSync(filePath);\n  if (!isExists) return false;\n  const hash = await getFileMd5(filePath);\n\n  return fileHash === hash;\n};\n\nconst getFileMd5 = (filePath: string, sizeLimit = 10 * 1024 * 1024) => {\n  return new Promise((resolve, reject) => {\n    const hash = crypto.createHash(\"md5\");\n    const stream = createReadStream(filePath, { start: 0, end: sizeLimit });\n\n    stream.on(\"data\", (data) => {\n      hash.update(data);\n    });\n\n    stream.on(\"end\", () => {\n      const md5 = hash.digest(\"hex\");\n      resolve(md5);\n    });\n\n    stream.on(\"error\", (error) => {\n      reject(error);\n    });\n  });\n};\n\nexport const getFile = ({ filePath }) => {\n  return new Promise((reslove, reject) => {\n    readFile(filePath, (err, data) => {\n      err ? reject(err) : reslove({ data: data, name: path.basename(filePath) });\n    });\n    // const readableStream = fs.createReadStream(filePath);\n\n    // let fileData = Buffer.from(\"\");\n\n    // readableStream.on(\"data\", (chunk) => {\n    //   fileData = Buffer.concat([fileData, chunk]);\n    // });\n\n    // readableStream.on(\"end\", () => {\n    //   // 发送文件数据到渲染进程\n    //   event.sender.send(\"file-data\", fileData, filePath);\n    // });\n\n    // readableStream.on(\"error\", (error) => {\n    //   console.error(\"An error occurred while reading the file:\", error);\n    // });\n  });\n};\n"],"mappings":"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","names":["path","crypto"],"file":"index.js"}